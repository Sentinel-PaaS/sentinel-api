# docker stack deploy -c stack-traefik-main.yaml traefik --prune

version: '3.7'

services:
  traefik:
    image: traefik:2.6
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    configs:
      # Static config
      - source: traefik-config
        target: /etc/traefik/traefik.yaml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /conf.d:/conf.d
      - /letsencrypt/acme.json:/assets/letsencrypt/acme.json
      # - /users/users:/users/users
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(`{{ traefikHostName|default("traefik.default.com", true) }}`)
        - traefik.http.routers.traefik.entrypoints=web
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=myresolver
        - traefik.http.services.traefik.loadbalancer.server.port=8080
        # - traefik.http.middlewares.monitor-auth.basicauth.usersfile=/users/users
        - traefik.http.middlewares.monitor-auth.basicauth.users=admin:{{ escapedHash }}
        - traefik.http.routers.traefik.middlewares=monitor-auth

        # - traefik.http.routers.t.middlewares=authtraefik
        # - traefik.http.middlewares.authtraefik.basicauth.users=admin:<bcrypted password string>

        # - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`) # global redirect to https
        # - traefik.http.routers.http-catchall.entrypoints=web
        # - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

        # - traefik.http.routers.ping.rule=Host(`traefik.example.com`) && Path(`/ping`)
        # - traefik.http.routers.ping.service=ping@internal
        # - traefik.http.routers.ping.tls.certresolver=le
        # - traefik.http.routers.ping.tls=true

  prometheus:
    image: prom/prometheus:v2.22.1
    networks:
      - traefik-public
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      labels:
      # - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
      # - "traefik.http.routers.prometheus.service=prometheus"
      # - "traefik.http.routers.prometheus.middlewares=prometheus-stripprefix"
      # - "traefik.http.middlewares.prometheus-stripprefix.stripprefix.prefixes=/prometheus"
      - traefik.http.routers.prometheus.rule=Host(`{{ prometheusHostName|default("prometheus.default.com", true) }}`)
      - traefik.http.routers.prometheus.service=prometheus
      # - traefik.http.routers.prometheus.entrypoints=web
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.tls.certresolver=myresolver
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.docker.network=traefik-public
      - traefik.http.middlewares.monitor-auth.basicauth.users=admin:{{ escapedHash }}
      - traefik.http.routers.prometheus.middlewares=monitor-auth 
      placement:
        constraints:
        - node.role==manager
      restart_policy:
        condition: on-failure
  
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - traefik-public
    deploy:
      mode: global
      # placement:
      #   constraints:
      #     - node.role == manager
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"

  grafana:
    image: grafana/grafana:7.3.1
    networks:
      - traefik-public
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_ORG_ROLE=Admin
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    deploy:
      labels:
        - traefik.http.routers.grafana.rule=Host(`{{ grafanaHostName|default("grafana.default.com", true) }}`)
        - traefik.http.routers.grafana.service=grafana
        # - "traefik.http.routers.grafana.entrypoints=web"
        - traefik.http.routers.grafana.entrypoints=websecure
        - traefik.http.routers.grafana.tls=true
        - traefik.http.routers.grafana.tls.certresolver=myresolver
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.docker.network=traefik-public
        - traefik.http.middlewares.monitor-auth.basicauth.users=admin:{{ escapedHash }}
        - traefik.http.routers.grafana.middlewares=monitor-auth
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

networks:
  traefik-public:
    driver: overlay
    attachable: true
    name: traefik-public
    # external: true

volumes:
#   traefik-certificates:
    prometheus_data: {}
    grafana_data: {}

configs:
  traefik-config:
    name: traefik-config
    file: ./traefik.yaml